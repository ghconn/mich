/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace CTest.thriftdemo
{
  public partial class MyDemo {
    public interface ISync {
      int testM1(int num1, int num2);
      List<string> testM2(string s1);
      void testM3(Dictionary<string, string> dict1);
      void testM4(List<Kevp> kvp);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_testM1(AsyncCallback callback, object state, int num1, int num2);
      int End_testM1(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_testM2(AsyncCallback callback, object state, string s1);
      List<string> End_testM2(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_testM3(AsyncCallback callback, object state, Dictionary<string, string> dict1);
      void End_testM3(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_testM4(AsyncCallback callback, object state, List<Kevp> kvp);
      void End_testM4(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_testM1(AsyncCallback callback, object state, int num1, int num2)
      {
        return send_testM1(callback, state, num1, num2);
      }

      public int End_testM1(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testM1();
      }

      #endif

      public int testM1(int num1, int num2)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_testM1(null, null, num1, num2);
        return End_testM1(asyncResult);

        #else
        send_testM1(num1, num2);
        return recv_testM1();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testM1(AsyncCallback callback, object state, int num1, int num2)
      {
        oprot_.WriteMessageBegin(new TMessage("testM1", TMessageType.Call, seqid_));
        testM1_args args = new testM1_args();
        args.Num1 = num1;
        args.Num2 = num2;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_testM1(int num1, int num2)
      {
        oprot_.WriteMessageBegin(new TMessage("testM1", TMessageType.Call, seqid_));
        testM1_args args = new testM1_args();
        args.Num1 = num1;
        args.Num2 = num2;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public int recv_testM1()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testM1_result result = new testM1_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testM1 failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_testM2(AsyncCallback callback, object state, string s1)
      {
        return send_testM2(callback, state, s1);
      }

      public List<string> End_testM2(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_testM2();
      }

      #endif

      public List<string> testM2(string s1)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_testM2(null, null, s1);
        return End_testM2(asyncResult);

        #else
        send_testM2(s1);
        return recv_testM2();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testM2(AsyncCallback callback, object state, string s1)
      {
        oprot_.WriteMessageBegin(new TMessage("testM2", TMessageType.Call, seqid_));
        testM2_args args = new testM2_args();
        args.S1 = s1;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_testM2(string s1)
      {
        oprot_.WriteMessageBegin(new TMessage("testM2", TMessageType.Call, seqid_));
        testM2_args args = new testM2_args();
        args.S1 = s1;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public List<string> recv_testM2()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testM2_result result = new testM2_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "testM2 failed: unknown result");
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_testM3(AsyncCallback callback, object state, Dictionary<string, string> dict1)
      {
        return send_testM3(callback, state, dict1);
      }

      public void End_testM3(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_testM3();
      }

      #endif

      public void testM3(Dictionary<string, string> dict1)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_testM3(null, null, dict1);
        End_testM3(asyncResult);

        #else
        send_testM3(dict1);
        recv_testM3();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testM3(AsyncCallback callback, object state, Dictionary<string, string> dict1)
      {
        oprot_.WriteMessageBegin(new TMessage("testM3", TMessageType.Call, seqid_));
        testM3_args args = new testM3_args();
        args.Dict1 = dict1;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_testM3(Dictionary<string, string> dict1)
      {
        oprot_.WriteMessageBegin(new TMessage("testM3", TMessageType.Call, seqid_));
        testM3_args args = new testM3_args();
        args.Dict1 = dict1;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_testM3()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testM3_result result = new testM3_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      
      public IAsyncResult Begin_testM4(AsyncCallback callback, object state, List<Kevp> kvp)
      {
        return send_testM4(callback, state, kvp);
      }

      public void End_testM4(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_testM4();
      }

      #endif

      public void testM4(List<Kevp> kvp)
      {
        #if SILVERLIGHT
        var asyncResult = Begin_testM4(null, null, kvp);
        End_testM4(asyncResult);

        #else
        send_testM4(kvp);
        recv_testM4();

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_testM4(AsyncCallback callback, object state, List<Kevp> kvp)
      {
        oprot_.WriteMessageBegin(new TMessage("testM4", TMessageType.Call, seqid_));
        testM4_args args = new testM4_args();
        args.Kvp = kvp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        return oprot_.Transport.BeginFlush(callback, state);
      }

      #else

      public void send_testM4(List<Kevp> kvp)
      {
        oprot_.WriteMessageBegin(new TMessage("testM4", TMessageType.Call, seqid_));
        testM4_args args = new testM4_args();
        args.Kvp = kvp;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }
      #endif

      public void recv_testM4()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        testM4_result result = new testM4_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["testM1"] = testM1_Process;
        processMap_["testM2"] = testM2_Process;
        processMap_["testM3"] = testM3_Process;
        processMap_["testM4"] = testM4_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void testM1_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testM1_args args = new testM1_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testM1_result result = new testM1_result();
        try
        {
          result.Success = iface_.testM1(args.Num1, args.Num2);
          oprot.WriteMessageBegin(new TMessage("testM1", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("testM1", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testM2_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testM2_args args = new testM2_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testM2_result result = new testM2_result();
        try
        {
          result.Success = iface_.testM2(args.S1);
          oprot.WriteMessageBegin(new TMessage("testM2", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("testM2", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testM3_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testM3_args args = new testM3_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testM3_result result = new testM3_result();
        try
        {
          iface_.testM3(args.Dict1);
          oprot.WriteMessageBegin(new TMessage("testM3", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("testM3", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void testM4_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        testM4_args args = new testM4_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        testM4_result result = new testM4_result();
        try
        {
          iface_.testM4(args.Kvp);
          oprot.WriteMessageBegin(new TMessage("testM4", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("testM4", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testM1_args : TBase
    {
      private int _num1;
      private int _num2;

      public int Num1
      {
        get
        {
          return _num1;
        }
        set
        {
          __isset.num1 = true;
          this._num1 = value;
        }
      }

      public int Num2
      {
        get
        {
          return _num2;
        }
        set
        {
          __isset.num2 = true;
          this._num2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool num1;
        public bool num2;
      }

      public testM1_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32) {
                  Num1 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Num2 = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("testM1_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.num1) {
            field.Name = "num1";
            field.Type = TType.I32;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Num1);
            oprot.WriteFieldEnd();
          }
          if (__isset.num2) {
            field.Name = "num2";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Num2);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testM1_args(");
        bool __first = true;
        if (__isset.num1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Num1: ");
          __sb.Append(Num1);
        }
        if (__isset.num2) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Num2: ");
          __sb.Append(Num2);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testM1_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testM1_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("testM1_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testM1_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testM2_args : TBase
    {
      private string _s1;

      public string S1
      {
        get
        {
          return _s1;
        }
        set
        {
          __isset.s1 = true;
          this._s1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool s1;
      }

      public testM2_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  S1 = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("testM2_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (S1 != null && __isset.s1) {
            field.Name = "s1";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(S1);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testM2_args(");
        bool __first = true;
        if (S1 != null && __isset.s1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("S1: ");
          __sb.Append(S1);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testM2_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public testM2_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list5 = iprot.ReadListBegin();
                    for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                    {
                      string _elem7;
                      _elem7 = iprot.ReadString();
                      Success.Add(_elem7);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("testM2_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter8 in Success)
                {
                  oprot.WriteString(_iter8);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testM2_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testM3_args : TBase
    {
      private Dictionary<string, string> _dict1;

      public Dictionary<string, string> Dict1
      {
        get
        {
          return _dict1;
        }
        set
        {
          __isset.dict1 = true;
          this._dict1 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool dict1;
      }

      public testM3_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map) {
                  {
                    Dict1 = new Dictionary<string, string>();
                    TMap _map9 = iprot.ReadMapBegin();
                    for( int _i10 = 0; _i10 < _map9.Count; ++_i10)
                    {
                      string _key11;
                      string _val12;
                      _key11 = iprot.ReadString();
                      _val12 = iprot.ReadString();
                      Dict1[_key11] = _val12;
                    }
                    iprot.ReadMapEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("testM3_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Dict1 != null && __isset.dict1) {
            field.Name = "dict1";
            field.Type = TType.Map;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Dict1.Count));
              foreach (string _iter13 in Dict1.Keys)
              {
                oprot.WriteString(_iter13);
                oprot.WriteString(Dict1[_iter13]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testM3_args(");
        bool __first = true;
        if (Dict1 != null && __isset.dict1) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dict1: ");
          __sb.Append(Dict1);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testM3_result : TBase
    {

      public testM3_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("testM3_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testM3_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testM4_args : TBase
    {
      private List<Kevp> _kvp;

      public List<Kevp> Kvp
      {
        get
        {
          return _kvp;
        }
        set
        {
          __isset.kvp = true;
          this._kvp = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool kvp;
      }

      public testM4_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.List) {
                  {
                    Kvp = new List<Kevp>();
                    TList _list14 = iprot.ReadListBegin();
                    for( int _i15 = 0; _i15 < _list14.Count; ++_i15)
                    {
                      Kevp _elem16;
                      _elem16 = new Kevp();
                      _elem16.Read(iprot);
                      Kvp.Add(_elem16);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("testM4_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Kvp != null && __isset.kvp) {
            field.Name = "kvp";
            field.Type = TType.List;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Kvp.Count));
              foreach (Kevp _iter17 in Kvp)
              {
                _iter17.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testM4_args(");
        bool __first = true;
        if (Kvp != null && __isset.kvp) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Kvp: ");
          __sb.Append(Kvp);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class testM4_result : TBase
    {

      public testM4_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("testM4_result");
          oprot.WriteStructBegin(struc);

          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("testM4_result(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
